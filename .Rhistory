?shinysurveys::teaching_r_questions
## page col can be added for multipage survey
## matrix questions (item batteries) are also available
questions <- shinysurveys::teaching_r_questions %>% head(3)
# ui ----------------------------------------------------------------------
ui <- shiny::fluidPage(
# theme = bslib::bs_theme(bootswatch = "darkly"),
shinyauthr::loginUI("login"),
uiOutput("survey")
)
# server ------------------------------------------------------------------
server <- function(input, output, session) {
credentials <- shinyauthr::loginServer(id = "login",
data = user_base,
user_col = "user",
pwd_col = "password")
output$survey <- renderUI({
if (credentials()$user_auth) {
shinysurveys::surveyOutput(df = questions,
survey_title = NULL,
survey_description = NULL,
theme = "white")
}
})
observeEvent(credentials(), {
if (credentials()$user_auth) shinysurveys::renderSurvey()
})
## getSurveyData
observeEvent(input$submit, {
# browser()
getSurveyData(custom_id = credentials()$info[["user"]])
?shinysurveys::getSurveyData
## TODO: write to database here
})
}
# app ---------------------------------------------------------------------
shiny::shinyApp(ui = ui, server = server)
library(shiny)
library(shinysurveys)
library(shinyjs)
library(shinyauthr)
library(bslib)
library(dplyr)
library(config)
rm(list = ls())
#### Proceed ####
# Understand shinyjs
# Save to database with custom_id = login credentials
# Host app (docker -> see golem) and test
# Clone individual functions: https://github.com/jdtrat/shinysurveys/blob/main/R/func_survey-output.R
## javascript can be found here: ~/R/x86_64-pc-linux-gnu-library/3.6/shinysurveys
# shinysurveys::demo_survey_multipage()
## Neat: you can use shinyjs::hide() and other functions such as declaring mandatory fields
help(package = "shinyjs")
## Load config
conf <- config::get()
user_base <- tibble(user = as.character(unlist(conf$user)), ## otherwise \n
password = as.character(unlist(conf$password)))
?shinysurveys::teaching_r_questions
## page col can be added for multipage survey
## matrix questions (item batteries) are also available
questions <- shinysurveys::teaching_r_questions %>% head(3)
# ui ----------------------------------------------------------------------
ui <- shiny::fluidPage(
# theme = bslib::bs_theme(bootswatch = "darkly"),
shinyauthr::loginUI("login"),
uiOutput("survey")
)
# server ------------------------------------------------------------------
server <- function(input, output, session) {
credentials <- shinyauthr::loginServer(id = "login",
data = user_base,
user_col = "user",
pwd_col = "password")
output$survey <- renderUI({
if (credentials()$user_auth) {
shinysurveys::surveyOutput(df = questions,
survey_title = NULL,
survey_description = NULL,
theme = "white")
}
})
observeEvent(credentials(), {
if (credentials()$user_auth) shinysurveys::renderSurvey()
})
## getSurveyData
observeEvent(input$submit, {
# browser()
df_db <<- getSurveyData(custom_id = credentials()$info[["user"]])
?shinysurveys::getSurveyData
## TODO: write to database here
})
}
# app ---------------------------------------------------------------------
shiny::shinyApp(ui = ui, server = server)
df_db
library(shiny)
library(shinysurveys)
library(shinyjs)
library(shinyauthr)
library(bslib)
library(dplyr)
library(config)
#### Proceed ####
# Understand shinyjs
# Save to database with custom_id = login credentials
# Host app (docker -> see golem) and test
# Clone individual functions: https://github.com/jdtrat/shinysurveys/blob/main/R/func_survey-output.R
## javascript can be found here: ~/R/x86_64-pc-linux-gnu-library/3.6/shinysurveys
# shinysurveys::demo_survey_multipage()
## Neat: you can use shinyjs::hide() and other functions such as declaring mandatory fields
help(package = "shinyjs")
## Load config
conf <- config::get()
user_base <- tibble(user = as.character(unlist(conf$user)), ## otherwise \n
password = as.character(unlist(conf$password)))
?shinysurveys::teaching_r_questions
## page col can be added for multipage survey
## matrix questions (item batteries) are also available
questions <- shinysurveys::teaching_r_questions %>% head(3)
# ui ----------------------------------------------------------------------
ui <- shiny::fluidPage(
# theme = bslib::bs_theme(bootswatch = "darkly"),
shinyauthr::loginUI("login"),
uiOutput("survey")
)
# server ------------------------------------------------------------------
server <- function(input, output, session) {
credentials <- shinyauthr::loginServer(id = "login",
data = user_base,
user_col = "user",
pwd_col = "password")
output$survey <- renderUI({
if (credentials()$user_auth) {
shinysurveys::surveyOutput(df = questions,
survey_title = NULL,
survey_description = NULL,
theme = "white")
}
})
observeEvent(credentials(), {
if (credentials()$user_auth) shinysurveys::renderSurvey()
})
## getSurveyData
observeEvent(input$submit, {
# browser()
getSurveyData(custom_id = credentials()$info[["user"]])
?shinysurveys::getSurveyData
## TODO: write to database here
})
}
# app ---------------------------------------------------------------------
shiny::shinyApp(ui = ui, server = server)
?dbCreateTable
con <- dbConnect(RPostgres::Postgres())
dbListTables(con)
dbCreateTable(con, "shiny_survey", df_db)
dbListTables()
dbListTables(con)
dbDisconnect(con)
response_to_db <- function(credentials = NULL, db_table, response) {
## establish connection (pass credentials to dbConnect)
con <- dbConnect(RPostgres::Postgres())
## check if table exists
stopifnot(db_table %in% dbListTables(con), "Table does not exist!")
## write to db
dbWriteTable(con, db_table, response)
## stop connection
dbDisconnect(con)
}
response_to_db(response = df_db)
response_to_db <- function(credentials = NULL, db_table = "shiny_survey", response) {
## establish connection (pass credentials to dbConnect)
con <- dbConnect(RPostgres::Postgres())
## check if table exists
stopifnot(db_table %in% dbListTables(con), "Table does not exist!")
## write to db
dbWriteTable(con, db_table, response)
## stop connection
dbDisconnect(con)
}
response_to_db(response = df_db)
dbDisconnect(con)
debugonce(response_to_db)
response_to_db(response = df_db)
dbListTables(con)
db_table %in% dbListTables(con)
?stopifnot
response_to_db <- function(credentials = NULL, db_table = "shiny_survey", response) {
## establish connection (pass credentials to dbConnect)
con <- dbConnect(RPostgres::Postgres())
## check if table exists
if (!(db_table %in% dbListTables(con))) stop("Table does not exist!")
## write to db
dbWriteTable(con, db_table, response)
## stop connection
dbDisconnect(con)
}
response_to_db(response = df_db)
help(package = "DBI")
response_to_db <- function(credentials = NULL, db_table = "shiny_survey", response) {
## establish connection (pass credentials to dbConnect)
con <- dbConnect(RPostgres::Postgres())
## check if table exists
if (!(db_table %in% dbListTables(con))) stop("Table does not exist!")
## write to db
dbAppendTable(con, db_table, response)
## stop connection
dbDisconnect(con)
}
response_to_db(response = df_db)
df_db
tibble(df_db)
df_db %>% mutate(across(everything(), as.character))
df_db %>% mutate(across(everything(), as.character)) %>% tibble()
library(shiny)
library(shinysurveys)
library(shinyjs)
library(shinyauthr)
library(bslib)
library(dplyr)
library(config)
rm(list = ls())
#### Proceed ####
# Understand shinyjs
# Save to database with custom_id = login credentials
# Host app (docker -> see golem) and test
# Clone individual functions: https://github.com/jdtrat/shinysurveys/blob/main/R/func_survey-output.R
## javascript can be found here: ~/R/x86_64-pc-linux-gnu-library/3.6/shinysurveys
# shinysurveys::demo_survey_multipage()
## Neat: you can use shinyjs::hide() and other functions such as declaring mandatory fields
help(package = "shinyjs")
## Load config
conf <- config::get()
user_base <- tibble(user = as.character(unlist(conf$user)), ## otherwise \n
password = as.character(unlist(conf$password)))
?shinysurveys::teaching_r_questions
## page col can be added for multipage survey
## matrix questions (item batteries) are also available
questions <- shinysurveys::teaching_r_questions %>% head(3)
# ui ----------------------------------------------------------------------
ui <- shiny::fluidPage(
# theme = bslib::bs_theme(bootswatch = "darkly"),
shinyauthr::loginUI("login"),
uiOutput("survey")
)
# server ------------------------------------------------------------------
server <- function(input, output, session) {
credentials <- shinyauthr::loginServer(id = "login",
data = user_base,
user_col = "user",
pwd_col = "password")
output$survey <- renderUI({
if (credentials()$user_auth) {
shinysurveys::surveyOutput(df = questions,
survey_title = NULL,
survey_description = NULL,
theme = "white")
}
})
observeEvent(credentials(), {
if (credentials()$user_auth) shinysurveys::renderSurvey()
})
## getSurveyData
observeEvent(input$submit, {
# browser()
df_db <<- getSurveyData(custom_id = credentials()$info[["user"]])
?shinysurveys::getSurveyData
## write to database here
## TODO: implement credentials in response_to_db()
response <- df_db %>% mutate(across(everything(), as.character))
response_to_db(response = response)
})
}
# app ---------------------------------------------------------------------
shiny::shinyApp(ui = ui, server = server)
source("./R/response_to_db.R")
library(shiny)
library(shinysurveys)
library(shinyjs)
library(shinyauthr)
library(bslib)
library(dplyr)
library(config)
rm(list = ls())
source("./R/response_to_db.R")
#### Proceed ####
# Understand shinyjs
# Save to database with custom_id = login credentials
# Host app (docker -> see golem) and test
# Clone individual functions: https://github.com/jdtrat/shinysurveys/blob/main/R/func_survey-output.R
## javascript can be found here: ~/R/x86_64-pc-linux-gnu-library/3.6/shinysurveys
# shinysurveys::demo_survey_multipage()
## Neat: you can use shinyjs::hide() and other functions such as declaring mandatory fields
help(package = "shinyjs")
## Load config
conf <- config::get()
user_base <- tibble(user = as.character(unlist(conf$user)), ## otherwise \n
password = as.character(unlist(conf$password)))
?shinysurveys::teaching_r_questions
## page col can be added for multipage survey
## matrix questions (item batteries) are also available
questions <- shinysurveys::teaching_r_questions %>% head(3)
# ui ----------------------------------------------------------------------
ui <- shiny::fluidPage(
# theme = bslib::bs_theme(bootswatch = "darkly"),
shinyauthr::loginUI("login"),
uiOutput("survey")
)
# server ------------------------------------------------------------------
server <- function(input, output, session) {
credentials <- shinyauthr::loginServer(id = "login",
data = user_base,
user_col = "user",
pwd_col = "password")
output$survey <- renderUI({
if (credentials()$user_auth) {
shinysurveys::surveyOutput(df = questions,
survey_title = NULL,
survey_description = NULL,
theme = "white")
}
})
observeEvent(credentials(), {
if (credentials()$user_auth) shinysurveys::renderSurvey()
})
## getSurveyData
observeEvent(input$submit, {
# browser()
df_db <<- getSurveyData(custom_id = credentials()$info[["user"]])
?shinysurveys::getSurveyData
## write to database here
## TODO: implement credentials in response_to_db()
response <- df_db %>% mutate(across(everything(), as.character))
response_to_db(response = response)
})
}
# app ---------------------------------------------------------------------
shiny::shinyApp(ui = ui, server = server)
help(package = "shinysurveys")
help(package = "shinysurveys")
library(shiny)
library(shinysurveys)
library(shinyjs)
library(shinyauthr)
library(bslib)
library(dplyr)
library(config)
rm(list = ls())
source("./R/response_to_db.R")
#### Proceed ####
# Understand shinyjs
# Save to database with custom_id = login credentials
# Host app (docker -> see golem) and test
# Clone individual functions: https://github.com/jdtrat/shinysurveys/blob/main/R/func_survey-output.R
## javascript can be found here: ~/R/x86_64-pc-linux-gnu-library/3.6/shinysurveys
# shinysurveys::demo_survey_multipage()
## Neat: you can use shinyjs::hide() and other functions such as declaring mandatory fields
help(package = "shinyjs")
## Load config
conf <- config::get()
user_base <- tibble(user = as.character(unlist(conf$user)), ## otherwise \n
password = as.character(unlist(conf$password)))
?shinysurveys::teaching_r_questions
## page col can be added for multipage survey
## matrix questions (item batteries) are also available
questions <- shinysurveys::teaching_r_questions %>% head(3)
# ui ----------------------------------------------------------------------
ui <- shiny::fluidPage(
# theme = bslib::bs_theme(bootswatch = "darkly"),
shinyauthr::loginUI("login"),
uiOutput("survey")
)
# server ------------------------------------------------------------------
server <- function(input, output, session) {
credentials <- shinyauthr::loginServer(id = "login",
data = user_base,
user_col = "user",
pwd_col = "password")
output$survey <- renderUI({
if (credentials()$user_auth) {
shinysurveys::surveyOutput(df = questions,
survey_title = NULL,
survey_description = NULL,
theme = "white")
}
})
observeEvent(credentials(), {
if (credentials()$user_auth) shinysurveys::renderSurvey()
})
## getSurveyData
observeEvent(input$submit, {
# browser()
df_db <<- getSurveyData(custom_id = credentials()$info[["user"]])
?shinysurveys::getSurveyData
## write to database here
## TODO: implement credentials in response_to_db()
response <- df_db %>% mutate(across(everything(), as.character))
response_to_db(response = response)
showModal(modalDialog(
title = "Thanks for your participation",
"You can now close the browser!"
))
})
}
# app ---------------------------------------------------------------------
shiny::shinyApp(ui = ui, server = server)
response_to_db(response = df_db)
?pkgload::load_all
install.packages("devtools")
?pkgload::load_all
?usethis::use_package
usethis::use_description()
devtools::load_all()
rm(list = ls())
usethis::use_package("shiny")
usethis::use_package("shinysurveys")
usethis::use_package("shinyjs")
usethis::use_package("shinyauthr")
usethis::use_package("bslib")
usethis::use_package("dplyr")
usethis::use_package("config")
usethis::use_package("DBI")
usethis::use_package("RPostgres")
?usethis::use_build_ignore
usethis::use_build_ignore("app.R")
usethis::use_build_ignore("./R/authentication.R")
usethis::use_build_ignore("./R/authr_authentication.R")
usethis::use_build_ignore("./R/module_authentication.R")
?tibble
devtools::load_all()
devtools::document()
devtools::document()
devtools::document()
devtools::load_all()
survey::surveyApp()
devtools::load_all()
survey::surveyApp()
pkgload::load_all(".")
surveyApp()
pkgload::load_all(".")
surveyApp()
pkgload::load_all(".")
surveyApp()
pkgload::load_all(".")
surveyApp()
devtools::check()
devtools::check()
devtools::check()
remotes::install_local()
library(survey)
library(survey)
survey::surveyApp()
install.packages("golem")
library(golem)
usethis::use_build_ignore("run_app.R")
golem::add_dockerfile_heroku()
golem::add_dockerfile_heroku()
pkgload::load_all(".")
surveyApp()
install.packages("renv")
library(renv)
renv::init()
renv::snapshot()
devtools::load_all()
?renv::restore
?renv::snapshot
renv::snapshot()
renv::snapshot()
help(package = "farver")
vignette("docker", package = "renv")
renv::dependencies()
?renv::restore
renv::init()
library(shiny)
shiny::runApp
?shiny::runApp
renv::restore()
?renv::restore
library(renv)
?renv::restore()
?renv::restore
renv::restore
view(renv::restore)
View(renv::restore)
renv::init()
renv::init()
renv::snapshot()
library
?library
?renv::init
renv::init()
renv::init()
library(dplyr)
renv::init()
library(dplyr)
renv::clean()
renv::clean()
renv::diagnostics()
renv::rebuild()
library(shiny)
?shinyApp
devtools::load_all()
library(devtools)
pkgload::load_all(".")
surveyApp()
pkgload::load_all(".")
surveyApp()
pkgload::load_all(".")
surveyApp()
pkgload::load_all(".")
surveyApp()
